Permutations II

描述

Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]

分析

排序是为了方便去重。同一个元素不要重复使用，不同元素值相同，去重。
递归，深度优先

时间复杂度O(n!)，空间复杂度O(n)

代码

public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        // 排序去重
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        boolean[] visited = new boolean[nums.length];

        dfs(nums, visited, path, result);
        return result;
    }
    
    private void dfs(int[] nums, boolean[] visited, List<Integer> path, List<List<Integer>> result) {
        if (path.size() == nums.length) {
            result.add(new ArrayList<Integer>(path));
            return;
        }

        for(int i=0; i<nums.length; i++) {
            if (visited[i] // 同一个元素不要重复使用
                || (i>0 && nums[i] == nums[i-1] && visited[i-1])) {// 不同元素值相同，去重
                continue;
            }

            visited[i] = true;
            path.add(nums[i]);
            dfs(nums, visited, path, result);
            path.remove(path.size() - 1);
            visited[i] = false;
        }
    }
}
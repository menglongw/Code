Subsets II

描述

Given a collection of integers that might contain duplicates, nums, return all possible subsets.

Note: The solution set must not contain duplicate subsets.

For example,
If nums = [1,2,2], a solution is:

[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]


分析

排序去重
递归，深度优先

[0,1,2,3]结果为
[[],[0],[0,1],[0,1,2],[0,1,2,3],[0,1,3],[0,2],[0,2,3],[0,3],[1],[1,2],[1,2,3],[1,3],[2],[2,3],[3]]
0开头的全算出来，
  1为第二个字母的全算出来，
  2为第二个字母的全算出来，
  3为第二个字母的全算出来，
1开头的全算出来，
  2为第二个字母的全算出来，
  3为第二个字母的全算出来，
2开头的全算出来，
  3为第二个字母的全算出来，
3开头的全算出来

代码

public class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        // 排序去重
        Arrays.sort(nums);

        List<List<Integer>> result = new ArrayList<>();
        List<Integer> path = new ArrayList<>();

        dfs(nums, 0, path, result);
        return result;
    }
    
    private void dfs(int[] nums, int current, List<Integer> path, List<List<Integer>> result) {
        result.add(new ArrayList<Integer>(path));

        for (int start=current; start<nums.length; start++) {
            if (start != current && nums[start] == nums[start-1])
                continue;

            path.add(nums[start]);
            dfs(nums, start + 1, path, result);
            path.remove(path.size() - 1);
        }
    }
}
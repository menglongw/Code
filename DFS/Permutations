Permutations

描述

Given a collection of distinct numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

分析

没有重复数字，不需要排序。已经用过的数字不要再用，比如输入[1,2,3]输出不应该包含[1,1,1]
递归，深度优先

时间复杂度O(n!)，空间复杂度O(n)，因为有path.contains(i)，所以说时间复杂度为O(n!)也不完全准确。

代码

public class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> path = new ArrayList<>();

        dfs(nums, path, result);
        return result;
    }
    
    private void dfs(int[] nums, List<Integer> path, List<List<Integer>> result) {
        if (path.size() == nums.length) {
            result.add(new ArrayList<Integer>(path));
            return;
        }

        for(int i : nums) {
            // i在path中出现过则跳过
            if (path.contains(i))
                continue;

            path.add(i);
            dfs(nums, path, result);
            path.remove(path.size() - 1);
        }
    }
}
Longest Palindrome

描述

Given a string which consists of lowercase or uppercase letters, 
find the length of the longest palindromes that can be built with those letters.

This is case sensitive, for example "Aa" is not considered a palindrome here.

Note:
Assume the length of given string will not exceed 1,010.

Example:

Input:
"abccccdd"

Output:
7

Explanation:
One longest palindrome that can be built is "dccaccd", whose length is 7.

分析

统计字母出现次数，偶数次直接加到结果上，奇数次减1变成偶数次后加到结果上，
如果有任何字母出现过奇数次，再给结果加1，因为此字母可以放在回文正中。

时间复杂度O(n)，时间复杂度O(1)

代码

public class Solution {
    public int longestPalindrome(String s) {
        int result = 0;

        if(s == null || s.isEmpty()) {
            return result;
        }

        // 虽然只包含大小写字母，一共52个。但是在ascii表里大写和小写中间有其他符号，不连续。
        // 所以不可以int[] count = new int[52];
        int[] count = new int[128];
        for(int i=0; i<s.length(); i++) {
            // ascii表里大写排在小写前，所以这里用A不用a
            int index = s.charAt(i) - 'A';
            count[index] += 1;
        }
        
        boolean includeOddCount = false;
        
        for(int c : count) {
            if(c%2 == 0) {
                result += c;
            } else {
                result += (c - 1);
                includeOddCount = true;
            }
        }
        
        // 如果有过任何一个字母出现奇数次，那么可以拿一个此字母放在字符串正中间仍然得到回文
        return includeOddCount? result+1 : result;
    }
}
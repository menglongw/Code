Simplify Path

描述

Given an absolute path for a file (Unix-style), simplify it.

For example,
path = "/home/", => "/home"
path = "/a/./b/../../c/", => "/c"

Corner Cases:
Did you consider the case where path = "/../"?
In this case, you should return "/".
Another corner case is the path might contain multiple slashes '/' together, such as "/home//foo/".
In this case, you should ignore redundant slashes and return "/home/foo".

分析

先将字符串依"/"分割出来，然后检查每个分割出来的字符串。
当字符串为空或者为"."，不做任何操作。
当字符串为"..", 则弹栈（返回上级目录）。
当字符串为其他，则将字符串入栈。

时间复杂度O(n)，空间复杂度O(n)

代码

public class Solution {
    public String simplifyPath(String path) {
        LinkedList<String> list = new LinkedList<>();
        String[] dirs = path.split("/");
        
        for(String dir : dirs) {
            if(dir.isEmpty() || ".".equals(dir)) {
                continue;
            } else if("..".equals(dir)) {
                if(!list.isEmpty()) 
                    list.removeLast();
            } else {
                list.add(dir);
            }
        }
        
        StringBuilder builder = new StringBuilder();

        if(list.isEmpty())
            return "/";

        for(String dir : list) {
            builder.append("/").append(dir);
        }
        
        return builder.toString();
    }
}

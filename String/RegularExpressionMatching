Regular Expression Matching

描述

Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true

分析

1. p为空，如果s也为空，返回true，否则返回false

2. p的长度为1，如果s长度也为1，且相同或是p为'.'则返回true，否则返回false

3. p的第二个字符不为*，如果此时s为空返回false，否则判断首字符是否匹配，且从各自的第二个字符开始调用递归函数匹配

4. p的第二个字符为*，

4.1 如果s和去掉前两个字符的p匹配（此时*匹配前面字符0次），若匹配返回true

否则

4.2 检查去掉首字符的s和去掉前两个字符的p（此时*匹配前面字符1次或多次）是否匹配，
如果匹配返回true，否则重复步骤4.2

循环结束没有任何匹配，返回false

时间复杂度O(n)，空间复杂度 ？

代码

public class Solution {
    public boolean isMatch(String s, String p) {
        if (p.isEmpty()) {
            return s.isEmpty();
        }

        if (p.length() == 1) {
            return (s.length() == 1 && (s.charAt(0) == p.charAt(0) || p.charAt(0) == '.'));
        }

        if (p.charAt(1) != '*') {
            if (s.isEmpty())
                return false;
            else
                return (s.charAt(0) == p.charAt(0) || p.charAt(0) == '.') && isMatch(s.substring(1), p.substring(1));
        } else {
            if(isMatch(s, p.substring(2))) {
                //when the '*' stands for 0 preceding element
                return true;
            } else {
                // when the '*' stands for 1 or more preceding element,
                // try every possible number
                for(int i=0; i < s.length() && (s.charAt(i) == p.charAt(0) || p.charAt(0) == '.'); i++){
                    if(isMatch(s.substring(i+1), p.substring(2)))
                        return true;
                }
            }
        }

        return false;
    }
}
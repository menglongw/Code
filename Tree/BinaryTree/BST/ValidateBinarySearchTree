Validate Binary Search Tree

描述

Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:
    2
   / \
  1   3
Binary tree [2,1,3], return true.
Example 2:
    1
   / \
  2   3
Binary tree [1,2,3], return false.

分析

时间复杂度O(n)，空间复杂度O(logn)

代码

public class Solution {
    public boolean isValidBST(TreeNode root) {
        // Integer的最大最小值有边界问题，因为treenode的val也是int，所以需要用long的最大最小值。
        return valid(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }
    
    private boolean valid(TreeNode node, long min, long max) {
        if(node == null) {
            return true;
        }

        if(node.val<=min || node.val>=max) {
            return false;
        }
        
        return valid(node.left, min, node.val) && valid(node.right, node.val, max);
    }
}
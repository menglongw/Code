Lowest Common Ancestor of a Binary Search Tree

描述

Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes 
v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”

        _______6______
       /              \
    ___2__          ___8__
   /      \        /      \
   0      _4       7       9
         /  \
         3   5
For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, 
since a node can be a descendant of itself according to the LCA definition.

分析

三种情况，两节点一个在左子树，一个在右子树。两个都在左子树，两个都在右子树。

解法1：递归
时间复杂度O(h)，空间复杂度O(h)，h为树的高度

解法1：迭代
时间复杂度O(h)，空间复杂度O(1)，h为树的高度

代码

方法1：递归

public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null)
            return null;
        
        // p和q都是null的情况应该不会出现，如果出现任何叶子结点都可以是最低祖先
        if(Math.max(p.val, q.val) < root.val)
            return lowestCommonAncestor(root.left, p, q);
        else if(root.val < Math.min(p.val, q.val))
            return lowestCommonAncestor(root.right, p, q);
        else
            return root;
    }
}

方法2：迭代

public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        while (root != null) {
            if (Math.max(p.val, q.val) < root.val) {
                root = root.left;
            } else if (Math.min(p.val, q.val) > root.val) {
                root = root.right;
            } else {
                return root;
            }
        }
        return null;
    }
}

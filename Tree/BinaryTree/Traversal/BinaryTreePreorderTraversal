Binary Tree Preorder Traversal

描述

Given a binary tree, return the preorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [1,2,3].

Note: Recursive solution is trivial, could you do it iteratively?

分析

解法1：迭代，注意栈是先入后出，所以先入右树
时间复杂度O(n)，空间复杂度O(n)

解法2：递归
时间复杂度O(n)，空间复杂度O(h)

The space complexity of this traversal seems to be O(h).  h is the height of the tree.

The best way to think about space complexity of recursive functions is (the number of stack frames)*(space  per stack frame).
In worst case of this algorithm, we can have h stack frames. With each stack frame having O(1) space.
So total space complexity is O(h).

代码

方法1：迭代

public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();

        if(root == null) {
            return result;
        }

        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        
        while(!stack.isEmpty()) {
            TreeNode current = stack.pop();
            result.add(current.val);

            // 栈是先入后出，所以先入右树
            if(current.right != null)
                stack.push(current.right);

            if(current.left != null)
                stack.push(current.left);
        }
        
        return result;
    }
}

方法2：递归

public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        traverse(root, result);
        return result;
    }
    
    private void traverse(TreeNode root, List<Integer> result) {
        if(root == null) {
            return;
        }
        
        result.add(root.val);
        traverse(root.left, result);
        traverse(root.right, result);
    }
}

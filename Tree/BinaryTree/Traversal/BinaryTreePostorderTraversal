Binary Tree Postorder Traversal

描述

Given a binary tree, return the postorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [3,2,1].

Note: Recursive solution is trivial, could you do it iteratively?

分析

    1
   / \
  2   3
 / \ / \
4  5 6  7

解法1：迭代

后续遍历稍难是因为后续遍历不是尾递归，上图后续遍历结果是4526731。
如果把先序遍历反过来先右树后左数，结果为1376254。正好和后序遍历结果相反。
所以可以按先序遍历的方法，只是先右后左的做，最后把list反转即可。

时间复杂度O(n)，空间复杂度O(n)

解法2：递归

时间复杂度O(n)，空间复杂度O(h)

The space complexity of this traversal seems to be O(h).  h is the height of the tree.

The best way to think about space complexity of recursive functions is (the number of stack frames)*(space  per stack frame).
In worst case of this algorithm, we can have h stack frames. With each stack frame having O(1) space.
So total space complexity is O(h).

代码

方法1：迭代

public class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();

        if(root == null) {
            return result;
        }

        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        
        while(!stack.isEmpty()) {
            TreeNode current = stack.pop();
            result.add(current.val);

            // 这里与preorder的顺序正好相反
            if(current.left != null)
                stack.push(current.left);

            if(current.right != null)
                stack.push(current.right);
        }
        
        // 反转顺序
        Collections.reverse(result);
        return result;
    }
}

方法2：递归

public class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        traverse(root, result);
        return result;
    }
    
    private void traverse(TreeNode root, List<Integer> result) {
        if(root == null) {
            return;
        }
        
        traverse(root.left, result);
        traverse(root.right, result);
        result.add(root.val);
    }
}
Binary Tree Level Order Traversal II

描述

Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

分析


从上往下一层一层从左到右遍历，每一层用一个list记录数值，当前层遍历过程中要计算出下一层的结点数。
然后把结果列表反转就是从下往上遍历的结果。

如果树是满树，结点数为n，树的高度为h，那么最下面一层的结点最多为2^(h-1)=n/2，空间复杂度为O(n/2)也就是O(n)
如果树退化成链表，每层只有一个结点，空间复杂度为O(1)

时间复杂度O(n)，空间复杂度O(n)

代码

public class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        
        if(root == null) {
            return result;
        }
        
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.offer(root);
        
        while(!queue.isEmpty()) {
            // 本层结点数
            int size = queue.size();
            List<Integer> values = new ArrayList<Integer>();

            // 遍历树的一层的所有结点
            for(int i=0; i<size; i++) {
                TreeNode node = queue.poll();
                values.add(node.val);
                
                if(node.left != null)
                    queue.offer(node.left);
                
                if(node.right != null)
                    queue.offer(node.right);
            }
            
            result.add(values);
        }
        
        // 反转结果列表
        Collections.reverse(result);
        return result;
    }
}

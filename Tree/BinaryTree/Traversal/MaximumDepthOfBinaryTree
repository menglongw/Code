Maximum Depth of Binary Tree

描述

Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

分析

解法1：递归

时间复杂度O(n)，空间复杂度O(logn)

解法2：level order traversal

也可以level traversal的方法做，当queue为空时返回level

时间复杂度O(n)，空间复杂度O(n)

代码

方法1：递归

public class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null)
            return 0;
        
        return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));
    }
}

方法2：level order tracersal

public class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null)
            return 0;
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        int levels = 0;
        
        while(!queue.isEmpty()) {
            int size = queue.size();
            
            for(int i=0; i<size; i++) {
                TreeNode node = queue.poll();

                if(node.left != null)
                    queue.offer(node.left);
                
                if(node.right != null)
                    queue.offer(node.right);
            }
            
            levels++;
        }
        
        return levels;
    }
}

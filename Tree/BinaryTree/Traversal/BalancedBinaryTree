Balanced Binary Tree

描述

Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree 
in which the depth of the two subtrees of every node never differ by more than 1.

分析

时间复杂度O(n)，空间复杂度O(h)

The space complexity of this traversal seems to be O(h).  h is the height of the tree.

The best way to think about space complexity of recursive functions is (the number of stack frames)*(space  per stack frame).
In worst case of this algorithm, we can have h stack frames. With each stack frame having O(1) space.
So total space complexity is O(h).

代码

public class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root == null)
            return true;
        
        return height(root) == -1 ? false : true;
    }
    
    private int height(TreeNode node) {
        if(node == null)
            return 0;
        
        int left = height(node.left);
        int right = height(node.right);
        
        // at least one of the sub trees is not balanced or this level is not balanced
        if(left == -1 || right == -1 || Math.abs(left - right) > 1)
            return -1;
        
        return Math.max(left, right) + 1;
    }
}
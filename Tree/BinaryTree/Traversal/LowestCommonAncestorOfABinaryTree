Lowest Common Ancestor of a Binary Tree

描述

Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as
the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”

        _______3______
       /              \
    ___5__          ___1__
   /      \        /      \
   6      _2       0       8
         /  \
         7   4
For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 is 5,
since a node can be a descendant of itself according to the LCA definition.

分析

因为不是BST而是BT所以不能通过结点值来判断，只能用自底向上(bottom-up)的方法做。
先看看是否能在root的左子树中找到p或q，再看看能否在右子树中找到。
如果两边都能找到，说明当前节点就是最近公共祖先
如果左边没找到，则说明p和q都在右子树
如果右边没找到，则说明p和q都在左子树

时间复杂度O(n)，空间复杂度O(h)，h为树的高度。

代码

public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        //发现目标节点则通过返回值标记该子树发现了某个目标结点
        if(root == null || root == p || root == q)
            return root;
    
        //查看左子树中是否有目标结点，没有为null
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        //查看右子树是否有目标节点，没有为null
        TreeNode right = lowestCommonAncestor(root.right, p, q);

        if(left!=null&&right!=null)
            //都不为空，说明做右子树都有目标结点，则公共祖先就是本身
            return root;
        else
            //如果发现了目标节点，则继续向上标记为该目标节点
            return left == null ? right : left;
    }
}
Binary Tree Right Side View

描述

Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

For example:
Given the following binary tree,
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
You should return [1, 3, 4].

分析

可不可以一直找右子树然后把所有结点加入结果列表？
不可以，因为一些层的最右边结点可能是上一层父结点的左结点。

从上到下，从左到右，层次遍历，记下每一层的结点数，只把每一层最后一个结点加入结果列表。

如果树是满树，结点数为n，树的高度为h，那么最下面一层的结点最多为2^(h-1)=n/2，空间复杂度为O(n/2)也就是O(n)
如果树退化成链表，每层只有一个结点，空间复杂度为O(1)

时间复杂度O(n)，空间复杂度O(n)

代码

public class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList<Integer>();
        
        if(root == null) {
            return result;
        }
        
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.offer(root);
        // 当前层的结点数
        int currentCount = 1;
        
        while(!queue.isEmpty()) {
            // 下一层的结点数
            int nextCount = 0;

            // 遍历树的一层的所有结点
            while(currentCount > 0) {
                TreeNode node = queue.poll();
                currentCount--;
                
                if(node.left != null) {
                    queue.offer(node.left);
                    nextCount++;
                }
                
                if(node.right != null) {
                    queue.offer(node.right);
                    nextCount++;
                }
                
                // 把当前层最后一个结点的数值加入结果列表
                if(currentCount == 0) {
                    result.add(node.val);
                }
            }

            currentCount = nextCount;
        }
        
        return result;
    }
}
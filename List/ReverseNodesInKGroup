Reverse Nodes in k-Group

描述

Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes
is not a multiple of k then left-out nodes in the end should remain as it is.

You may not alter the values in the nodes, only nodes itself may be changed.

Only constant memory is allowed.

For example,
Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5


分析

每k个节点组成的group进行反转，如果最后一个group不够k个则跳过。

时间复杂度O(n)，空间复杂度O(1)

代码

public class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if(head == null || head.next == null || k<2)
            return head;
        
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        
        ListNode prev = dummy;
        ListNode end = prev;
        
        while(end != null) {
            for(int i=0; i<k && end != null; i++) {
                end = end.next;
            }
            
            if(end == null)
                break;// 剩下的结点不够k个

            // prev为当前group的开始结点的前一个结点
            prev = reverse(prev, prev.next, end);
            end = prev;
        }
        
        return dummy.next;
    }

    private ListNode reverse(ListNode prev, ListNode start, ListNode end) {
        if(start == null || start.next == null)
            return start;
        
        ListNode endNext = end.next;
        ListNode current = start.next;

        while(current != endNext) {
            start.next = current.next;
            current.next = prev.next;
            prev.next = current;
            current = start.next;
        }
        
        return start;
    }
}
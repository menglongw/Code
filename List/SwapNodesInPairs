Swap Nodes in Pairs

描述

Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself
can be changed.

分析

以dummy->1->2->3->4->5为例。current指向待交换的pair的前一个结点即dummy。
先判断current.next和current.next.next是否都不为null。
如果有一个为null则不成对，处理结束。如果成对则把1挪到2后面。然后把current指向下一个pair的前一个结点即1。

时间复杂度O(n)，空间复杂度O(1)

public class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head == null) {
            return null;
        }
        
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode current = dummy;
        ListNode temp = null;
        
        while(current.next != null && current.next.next != null) {
            temp = current.next;
            current.next = current.next.next;
            temp.next = current.next.next;
            current.next.next = temp;
            current = temp;
        }
        
        return dummy.next;
    }
}

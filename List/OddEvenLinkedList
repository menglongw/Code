Odd Even Linked List

描述

Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.

You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.

Example:
Given 1->2->3->4->5->NULL,
return 1->3->5->2->4->NULL.

Note:
The relative order inside both the even and odd groups should remain as it was in the input. 
The first node is considered odd, the second node even and so on ...

分析

创建两个dummy node作为新的奇数和偶数结点链表的头，遍历原链表把奇数结点加入新的奇数结点链表，
偶数结点加入新的偶数结点链表，然后把两个新建的链表对接后返回。

时间复杂度O(n)，空间复杂度O(1)

代码

public class Solution {
    public ListNode oddEvenList(ListNode head) {
        if(head == null || head.next == null)
            return head;

        ListNode current = head;
        
        ListNode odd = new ListNode(0);
        ListNode p1 = odd;
        ListNode even = new ListNode(0);
        ListNode p2 = even;
        
        int index = 1;
        while(current != null) {
            if(index%2 == 1) {
                p1.next = current;
                p1 = current;
                current = current.next;
                p1.next = null;
            } else {
                p2.next = current;
                p2 = current;
                current = current.next;
                p2.next = null;
            }
            index++;
        }
        
        p1.next = even.next;
        return odd.next;
        
    }
}
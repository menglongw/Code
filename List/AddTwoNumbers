Add Two Numbers

描述

You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order and each of their nodes contain a single digit. 
Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

分析

模拟加法，注意遍历完链表后检查一下进位，如果进位为1则需要再加一个结点。
时间复杂度O(m+n)，空间复杂度O(1)。

代码

public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null && l2 == null)
            return null;
        else if(l1 == null && l2 != null)
            return l2;
        else if(l1 != null && l2 == null)
            return l1;
        
        ListNode dummy = new ListNode(0);
        ListNode p1 = l1;
        ListNode p2 = l2;
        ListNode p3 = dummy;
        
        int carry = 0;
        
        while(p1 != null || p2 != null) {
            int sum = 0;
          
            if(p1 != null) {
                sum = sum + p1.val;
                p1 = p1.next;
            }
            
            if(p2 != null) {
                sum = sum + p2.val;
                p2 = p2.next;
            }
            
            sum = sum + carry;
            
            if(sum >= 10) {
                carry = 1;
                sum = sum - 10;
            } else {
                carry = 0;
            }
            
            p3.next = new ListNode(sum);
            p3 = p3.next;
        }

        if(carry == 1) {
            p3.next = new ListNode(1);
        }
        
        return dummy.next;
    }
}

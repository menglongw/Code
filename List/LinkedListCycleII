Linked List Cycle II

描述

Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Note: Do not modify the linked list.

Follow up:
Can you solve it without using extra space?

分析

           ....B
           .   .
...........A....
 
起点到A的距离为x，环的长度为y，A逆时针到B的距离为k1，B逆时针到A的距离为k2，k1+k2=y。
还是快慢指针，慢指针一次一步，快指针一次两步，在环内逆时针走。
慢指针走了t步，快指针走了2t步，他俩在B相遇，t = x + n*y + k1，2t = x + m*y + k1
联合两等式得 x = (m-2n)*y - k = (m-2n-1)*y + k2
意思是说两个指针都是一次走一步可以相遇，一个指针从链表头开始走x步到A，另一个指针从B开始走绕环(m-2n-1)圈然后走k2步到A，
两指针在A相遇。

时间复杂度O(n)，空间复杂度O(1)

代码
 
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode p1 = head;
        ListNode p2 = head;
        
        while(p1 != null && p2 != null) {
            p2 = p2.next;
            if(p2 == null)
                return null;

            p2 = p2.next;
            if(p2 == null)
                return null;
            
            p1 = p1.next;
            if(p1 == p2)
                break;
        }
        
        //p1 and p2 are at B
        p1 = head;
        
        while(p1 != p2) {
            p1 = p1.next;
            p2 = p2.next;
        }

        return p1;
    }
}
Copy List with Random Pointer

描述

A linked list is given such that each node contains an additional random pointer which could point to any
node in the list or null.

Return a deep copy of the list.

分析

解法1：哈希表(两次遍历)

首先得弄懂深拷贝的含义，深拷贝可不是我们平时见到的对基本类型的变量赋值那么简单，深拷贝常常用于对象的克隆。这道题要求深度拷贝一个
带有 random 指针的链表，random 可能指向空，也可能指向链表中的任意一个节点。

对于通常的单向链表，我们依次遍历并根据原链表的值生成新节点即可，原链表的所有内容便被复制了一份。但由于此题中的链表不只是有 next 
指针，还有一个随机指针，故除了复制通常的 next 指针外还需维护新链表中的随机指针。容易混淆的地方在于原链表中的随机指针指向的是原
链表中的节点，深拷贝则要求将随机指针指向新链表中的节点。

所有类似的深度拷贝题目的传统做法，都是维护一个 hash table。即先按照复制一个正常链表的方式复制，复制的时候把复制的结点做一个 
hash table，以旧结点为 key，新节点为 value。这么做的目的是为了第二遍扫描的时候我们按照这个哈希表把结点的 random 指针接上。

原链表和深拷贝之后的链表如下：

|------------|             |------------|
|            v       ===>  |            v
1  --> 2 --> 3 --> 4       1' --> 2'--> 3'--> 4'

深拷贝步骤如下：
1. 根据 next 指针新建链表
2. 维护新旧节点的映射关系
3. 拷贝旧链表中的 random 指针
4. 更新新链表中的 random 指针
其中1, 2, 3 可以合并在一起。

时间复杂度O(n)，空间复杂度O(n)

解法2：

|------------|
|            v
1  --> 2 --> 3 --> 4

把新的结点加到对应的旧结点后面，如果旧结点的random不是null的话，新结点的random就是旧结点的random的下一个结点。

|--------------------------|
|                          v
1  --> 1' --> 2 --> 2' --> 3 --> 3' --> 4 --> 4'
       |                         ^
       |-------------------------|
       
将链表拆为两个链表，返回新链表，同时也不改变旧链表。

时间复杂度O(n)，空间复杂度O(1)

代码

方法1：

public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if(head == null)
            return head;
            
        Map<RandomListNode, RandomListNode> map = new HashMap<>();
        RandomListNode p1 = head;
        RandomListNode newHead = new RandomListNode(head.label);
        RandomListNode p2 = newHead;
        
        while(p1 != null) {
            if(p1.next != null)
                p2.next = new RandomListNode(p1.next.label);

            p2.random = p1.random;
            map.put(p1, p2);

            p1 = p1.next;
            p2 = p2.next;
        }

        p2 = newHead;

        while(p2 != null) {
            if(p2.random != null)
                p2.random = map.get(p2.random);

            p2 = p2.next;
        }
        
        return newHead;
    }
}

方法2：

public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if(head == null)
            return head;
            
        RandomListNode p = head;
        // 把新的结点加到对应的旧结点后面
        while(p != null) {
            RandomListNode newNode = new RandomListNode(p.label);
            newNode.next = p.next;
            p.next = newNode;
            p = newNode.next;
        }
        
        p = head;
        // 如果旧结点的random不是null的话，新结点的random就是旧结点的random的下一个结点。
        while(p != null) {
            if(p.random != null)
                p.next.random = p.random.next;
            p = p.next.next;
        }
        
        RandomListNode dummy = new RandomListNode(0);
        RandomListNode current = dummy;
        p = head;
        // 将链表拆为两个链表，返回新链表，同时也不改变旧链表。
        while(p != null) {
            current.next = p.next;
            current = current.next;
            p.next = p.next.next;
            p = p.next;
        }
        
        return dummy.next;
    }
}
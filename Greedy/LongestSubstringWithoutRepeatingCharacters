Longest Substring Without Repeating Characters

描述

Given a string, find the length of the longest substring without repeating characters.

Examples:

Given "abcabcbb", the answer is "abc", which the length is 3.

Given "bbbbb", the answer is "b", with the length of 1.

Given "pwwkew", the answer is "wke", with the length of 3. Note that the answer must be a substring, 
"pwke" is a subsequence and not a substring.

分析

假设子串里含有重复字符，则父串一定含有重复字符，单个子问题就可以决定父问题，因此可以用贪心法。
跟动规不同，动规里，单个子问题只能影响父问题，不足以决定父问题。
从左往右扫描，当遇到重复字母时，以上一个重复字母的index+1，作为新的搜索起始位置，直到最后一个字母。

时间复杂度O(n)，空间复杂度O(1)

代码

public class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length() ==1) return 1;
        // 记录字符上次出现过的位置
        int[] last = new int[256];
        // 记录当前子串的起始位置
        int start = 0;

        // 0也是有效位置，因此初始化为-1
        Arrays.fill(last, -1);
        int maxLen = 0;

        for (int i = 0; i < s.length(); i++) {
            if (last[s.charAt(i)] >= start) {
                maxLen = Math.max(i - start, maxLen);
                start = last[s.charAt(i)] + 1;
            }

            last[s.charAt(i)] = i;
        }
        
        // 别忘了最后一次，例如"abcd"
        return Math.max(s.length() - start, maxLen);
    }
}
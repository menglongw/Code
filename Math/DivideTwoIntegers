Divide Two Integers

描述

Divide two integers without using multiplication, division and mod operator.

If it is overflow, return MAX_INT.

分析

比如45/6。6每次左移一位表示变为原来的2倍。6*(2^3)>45>6*(2^2)。所以此时result为4（即1左移两位），新的pDividend为45-24=21。
以21为pDividend，6为divisor继续上面的过程得到，result为4+2=6，新pDividend为21-12=9。继续得到result为6+1=7。
新pDividend为3，小于divisor6。处理完毕。

时间复杂度O(logn)，空间复杂度O(1)

代码

public class Solution {
    public int divide(int dividend, int divisor) {
        // handle special cases
        if(divisor==0 || (divisor==-1 && dividend == Integer.MIN_VALUE))
            return Integer.MAX_VALUE;
        
        // get positive values
        // 需要将dividend和divisor变成long，不然divisor左移时可能会变成负数从而陷入死循环
        long pDividend = Math.abs((long)dividend);
        long pDivisor = Math.abs((long)divisor);
     
        int result = 0;
        while(pDividend >= pDivisor) {
            // calculate number of left shifts
            int count = 0;    
            while(pDividend >= (pDivisor<<count)) {
                count++;
            }
     
            // dividend minus the largest shifted divisor
            result += 1<<(count-1);
            pDividend -= (pDivisor<<(count-1));
        }
     
        if((dividend>0 && divisor>0) || (dividend<0 && divisor<0))
            return result;
        else
            return -result;
    }
}
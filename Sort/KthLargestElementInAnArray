Kth Largest Element in an Array

描述

Find the kth largest element in an unsorted array. Note that it is the kth largest element in the
sorted order, not the kth distinct element.

For example,
Given [3,2,1,5,6,4] and k = 2, return 5.

Note: 
You may assume k is always valid, 1 ≤ k ≤ array's length.

分析

解法1：快速选择

最坏情况每次只能排除一个元素，要在剩下的元素集合里继续寻找。

时间复杂度O(n)，因为n+n/2+n/4+n/2... < 2n，最坏O(n^2)，因为n+(n-1)+(n-2)... < n*n = n^2，空间复杂度O(1)

解法2：最小堆

时间复杂度O(nlogk)，空间复杂度O(k)

代码

方法1：

public class Solution {
    public int findKthLargest(int[] nums, int k) {
        // 找第k大就是找第len-k+1小
        return findKthSmallest(nums, 0, nums.length-1, nums.length-k+1);
    }
    
    private int findKthSmallest(int[] nums, int start, int end, int k) {
        int left = start;
        int right = end;
        int pivot = nums[start];
        
        //单循环会有left和right一增一减擦肩而过的情况
        while(true) {
            while(nums[right] > pivot && left < right) {
                right--;
            }
            
            while(nums[left] <= pivot && left < right) {
                left++;
            }
            
            if(left == right) {
                break;
            }
            
            swap(nums, left, right);
        }
        
        // while循环中先挪右指针，再挪左指针，相遇则不挪，可见右指针一定指向小的等待交换的数，所以在这里交换
        // 右指针的数和第一个数即pivot
        swap(nums, right, start);

        // 此时left==right
        // 数组从0开始，元素序数从1开始，相差1
        if(right == k-1) {
            return pivot;
        } else if(right > k-1) {
            return findKthSmallest(nums, start, right-1, k);
        } else {
            //还是找第k小的吗？不似乎已经排除了right+1个，不是应给找k-(right+1)小的吗？
            //还是找第k小，因为新的partition还是要和0位置比较数组下标（比如right == k-1）
            return findKthSmallest(nums, right+1, end, k);
        }
    }
    
    private void swap(int[] nums, int a, int b) {
        int temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
    }
}

方法2：

public class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> q = new PriorityQueue<Integer>(k);

        for(int i: nums){
            q.offer(i);
     
            if(q.size()>k){
                q.poll();
            }
        }
     
        return q.peek();
    }
}

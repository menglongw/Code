Sort Colors

描述

Given an array with n objects colored red, white or blue, sort them so that objects of the same 
color are adjacent, with the colors in the order red, white and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Note:
You are not suppose to use the library's sort function for this problem.

Follow up:
A rather straight forward solution is a two-pass algorithm using counting sort.
First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total 
number of 0's, then 1's and followed by 2's.

Could you come up with an one-pass algorithm using only constant space?

分析

遍历数组，把red交换到前面，把blue交换到后面，中间自然剩下的是white。

时间复杂度O(n)，空间复杂度O(1)

代码

public class Solution {

    public void sortColors(int[] nums) {
        int red = 0;
        int blue = nums.length-1;
        
        int i=0;

        // i不要超过blue指针，因为blue指针右边的都已经排好序了。
        // 遇到red和white，i++。但是遇到blue不要i++。
        // 因为遇到red后交换到i的颜色随着red指针不断前进随后还会被正确处理，
        // 但是遇到blue交换过来的却可能不行，如果两个blue交换，由于i++会漏掉交换过来的blue
        // 原因是red和i前进方向一致，i在前red在后，但是blue和i的前进方向相反
        while(i <= blue) {
            if(nums[i] == 0) {
                swap(nums, i, red);
                i++;
                red++;
            } else if(nums[i] == 2) {
                swap(nums, i, blue);
                blue--;
            } else {
                i++;
            }
        }
    }
    
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
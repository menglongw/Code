Find Minimum in Rotated Sorted Array II

描述

Follow up for "Find Minimum in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

The array may contain duplicates.

分析

没有mi+1或mid-1是因为怕跳过pivot，因为不像一般二分查找有target==a[mid]，所有可能跳过

时间复杂度O(logn)，最坏O(n)，空间复杂度O(1)

代码

public class Solution {
    public int findMin(int[] nums) {
        int l = 0;
        int h = nums.length - 1;
        
        // 非旋转数组
        if(nums[l] < nums[h])
            return nums[l];

        while (l < h) {
            // 去重，例如[2,1,2,2]
            while(nums[l] == nums[h] && l!=h) {
                l++;
            }

            // 去重后变成非旋转数组
            if(nums[l] < nums[h])
                return nums[l];

            if(h - l == 1) {
                // 求最小值返回nums[h]，求最大值返nums[l]
                return nums[h];
            }

            int mid = l + (h-l) / 2;

            if(nums[l] < nums[mid]) {
                l = mid;
            } else if(nums[l] > nums[mid]) {
                h = mid;
            } else {
                // 去重，例如[3,3,1]
                l++;
            }
        }

        // 只有一个元素的情况
        return nums[0];
    }
}
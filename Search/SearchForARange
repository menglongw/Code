Search for a Range

描述

Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].

分析

找边界的target时，即便二分搜索找到target也要继续往边界方向找更靠边界的target
返回l还是h是关键，见代码注释的分析

时间复杂度O(logn)，空间复杂度O(1)

代码

public class Solution {
    public int[] searchRange(int[] nums, int target) {
        int lower = lowerBound(nums, 0, nums.length-1, target);
        int upper = upperBound(nums, 0, nums.length-1, target);
        return new int[]{lower, upper};
    }
    
    private int lowerBound(int[] a, int l, int h, int target) {
        while(l<=h) {
            int mid = l + (h-l)/2;
            if(target<a[mid])
                h = mid-1;
            else if(target>a[mid])
                l = mid+1;
            else
                h = mid-1; //继续往左边找
        }

        /* 
        为什么return l？
        当l和h相邻时
        1. 如果l是最左边的target，此时mid==l并且a[mid]==target，接着h=mid-1，然后h<l跳出循环，
        此时a[l]为最左边的target
        2. 如果h是最左边的target，此时mid==l并且a[mid]<target，接着l=mid+1，
        l==mid==h，a[mid]==target，接着h=mid-1，然后h<l跳出循环，
        此时a[l]为最左边的target
        */
        if(l>=0 && l<a.length && a[l]==target)
            return l;
        else
            return -1;
    }

    private int upperBound(int[] a, int l, int h, int target) {
        while(l<=h) {
            int mid = l + (h-l)/2;
            if(target<a[mid])
                h = mid-1;
            else if(target>a[mid])
                l = mid+1;
            else
                l = mid+1; //继续往右边找
        }

        /* 
        为什么return h？
        当l和h相邻时
        1. 如果l是最右边的target，此时mid==l并且a[mid]==target，接着l=mid+1，l==h，a[mid]>target，
        接h=mid-1，然后h<l跳出循环，此时a[h]为最右边的target
        2. 如果h是最右边的target，此时mid==l并且a[mid]<=target，接着l=mid+1，
        l==mid==h，a[mid]==target，接着h=mid+1，然后h<l跳出循环，
        此时a[h]为最右边的target
        */
        if(h>=0 && h<a.length && a[h]==target)
            return h;
        else
            return -1;
    }
}
Search in Rotated Sorted Array II

描述

Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Write a function to determine if a given target is in the array.

The array may contain duplicates.

分析

mid为target时返回mid，mid不是target时有四种情况。
1. mid在pivot左边，target在l和mid之间
2. mid在pivot左边，target在mid和h之间
3. mid在pivot右边，target在mid和h之间
4. mid在pivot右边，target在l和mid之间
5. a[mid] == a[l]，说明值a[l]有重复，跳过再计算
 
时间复杂度O(logn)，空间复杂度O(1)

代码

public class Solution {
    public boolean search(int[] nums, int target) {
        if(nums == null || nums.length == 0)
            return false;
        
        int l = 0;
        int h = nums.length-1;
        
        while(l <= h) {
            int mid = l + (h-l)/2;
            
            if(nums[mid] == target) {
                return true;
            } else if(nums[l] < nums[mid]) {
                if(nums[l] <= target && target < nums[mid])
                    h = mid-1;
                else
                    l = mid+1;
            } else if(nums[l] > nums[mid]) {
                if(nums[mid] < target && target <= nums[h])
                    l = mid+1;
                else
                    h = mid-1;
            } else { 
                // nums[mid] == nums[l], skip duplicates
                l++;
            }
        }
        
        return false;
    }
}


4Sum

描述

Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note: The solution set must not contain duplicate quadruplets.

For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]

分析

3Sum外面再加一层循环。
时间复杂度: O(n^3)，空间复杂度: O(1)

代码

public class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> results = new ArrayList<>();

        if(nums == null || nums.length<3) {
            return results;
        }

        Arrays.sort(nums);

        // 凑不够4个数字就不用再计算了
        for(int k=0; k<nums.length-3; k++) {
            // 此时nums[k]和前一个quadruplet相同，nums[i],nums[head]和nums[tail]都会出现相同的组合，
            // 不管是不是能得到target都不需要记录，均为重复计算。
            if(k > 0 && nums[k] == nums[k-1]) {
                    continue;
            }
            
            // 凑不够3个数字就不用再计算了
            for(int i=k+1; i<nums.length-2; i++) {
                // 见上同理，避免重复计算
                if(i > k+1 && nums[i] == nums[i-1]) {
                    continue;
                }
    
                int head = i+1;
                int tail  = nums.length-1;
    
                while(head<tail) {

                    // 见上同理，避免重复计算
                    if(head > i+1 && nums[head] == nums[head-1]) {
                        head++;
                        continue;
                    }
                    
                    // 见上同理，避免重复计算
                    if(tail < nums.length-1 && nums[tail] == nums[tail+1]) {
                        tail--;
                        continue;
                    }
                    
                    int sum = nums[k] + nums[i] + nums[head] + nums[tail];
                    
                    if(sum == target) {
                        results.add(Arrays.asList(nums[k], nums[i], nums[head], nums[tail]));
                        head++;
                        tail--;
                    } else if(sum < target) {
                        head++;
                    } else {
                        tail--;
                    }
                }
            }
        }

        return results;
    }
}
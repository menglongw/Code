3Sum Closest

描述

Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

For example, given array S = {-1 2 1 -4}, and target = 1.
The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

分析

先排序，然后左右夹逼，跳过重复的数避免重复计算。
时间复杂度: O(n^2), 空间复杂度: O(1)

代码

public class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int minDiff = Integer.MAX_VALUE;
        int result = 0;
        
        for(int i=0; i<nums.length-2; i++) {
            // 跳过重复的数，避免重复计算
            if(i > 0 && nums[i] == nums[i-1]) {
                continue;
            }
            
            int head = i+1;
            int tail = nums.length-1;
            
            while(head<tail) {
                // 跳过重复的数，避免重复计算
                if(head > i+1 && nums[head] == nums[head-1]) {
                    head++;
                    continue;
                }
                
                // 跳过重复的数，避免重复计算
                if(tail < nums.length-1 && nums[tail] == nums[tail+1]) {
                    tail--;
                    continue;
                }
                
                int sum = nums[i] + nums[head] + nums[tail];
                int diff = Math.abs(sum - target);
                
                //提前返回
                if(diff == 0) {
                    return sum;
                }
                
                if(diff<minDiff) {
                    minDiff = diff;
                    result = sum;
                }
                
                if(sum > target) {
                    tail--;
                } else {
                    head++;
                }
            }
        }
        
        return result;
    }
}
Trapping Rain Water

描述

Given n non-negative integers representing an elevation map where the width of each bar is 1,
compute how much water it is able to trap after raining.
For example, Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.

分析

对于每个柱子，找到其左右两边最高的柱子，该柱子能容纳的面积就是min(max_left, max_right) - height。
从左往右扫描一遍，对于每个柱子求左边最大值；
从右往左扫描一遍，对于每个柱子求右边最大值；
再扫描一遍，把每个柱子的面积并累加。

时间复杂度O(n)，空间复杂度O(n)

代码

public class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int[] leftPeak = new int[n];
        int[] rightPeak = new int[n];

        // 位置0不用管，水一定从左边流出所以存水量为0
        for (int i = 1; i < n; i++) {
            leftPeak[i] = Math.max(leftPeak[i-1], height[i-1]);
        }

        // 位置n-1不用管，水一定从右边流出所以存水量为0
        for (int i = n - 2; i >=0; --i) {
            rightPeak[i] = Math.max(rightPeak[i+1], height[i+1]);
        }

        int sum = 0;
        for (int i = 0; i < n; i++) {
            int h = Math.min(leftPeak[i], rightPeak[i]);

            // 左右最高的柱子必须比当前柱子高才能形成漏斗存水
            if ( h > height[i]) {
                sum += h - height[i];
            }
        }

        return sum;
    }
}

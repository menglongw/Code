Candy

描述

There are N children standing in a line. Each child is assigned a rating value.
You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.

What is the minimum candies you must give?

分析

把小孩的不同分数分布看成一个个的折线。
从左到右遍历：
如果右边比左边分数高则右边的糖数是左边糖数加1，这样可以保证上坡的数据符合分数高的糖多，只加1保证给最少的糖。
如果右边比左边分数低则右边的糖数设为1，此时下坡的糖数都是1一直到谷底。
从右到左遍历：
因为此时下坡糖数都是1，所以此次遍历是为了纠正下坡糖数而做。如果左边分数比右边分数高则左边糖数为右边糖数加1。
两遍遍历后，保证了谷底是分数最低的小孩其所得糖数都是1，保证至少每个小孩有一个糖。另外保证了分数越高糖越多而且给的糖总量最少。

时间复杂度O(n)，空间复杂度O(n)

代码

public class Solution {
    public int candy(int[] ratings) {
        if(ratings.length <= 1){
            return ratings.length;
        }

        int[] candies = new int[ratings.length];
        candies[0] = 1;

        // 先从左往右分糖，分数较高的多拿一颗糖，分数较少的只拿一颗糖
        for(int i = 1; i < ratings.length; i++){
            if(ratings[i] > ratings[i-1]){
                candies[i] = candies[i-1] + 1;
            } else {
                candies[i] = 1;
            }
        }

        int sum = candies[candies.length - 1];
        // 再从右往左继续分糖，分数较高的确保比右边多一颗就行了
        for(int i = ratings.length - 2; i >= 0; i--){
            if(ratings[i] > ratings[i+1]){
                // 需要取新值和旧值的最大值，否则会对第一次遍历做的上坡数据产生影响
                // 也就是说如果新值太小会把波峰的值变小导致波峰的值小于左边邻居的值
                candies[i] = Math.max(candies[i+1] + 1, candies[i]);
            }
            sum += candies[i];
        }

        return sum; 
    }
}

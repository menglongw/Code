3Sum

描述

Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],
A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]

分析

先排序，然后左右夹逼，注意跳过重复的数。
这个方法可以推广到k-sum，先排序，然后做k-2次循环，在最内层循环左右夹逼，时间复杂度是 O(max{nlogn,n^(k−1)})。

时间复杂度: O(n^2)，空间复杂度: O(1)

代码

public class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> results = new ArrayList<>();

        if(nums == null || nums.length<3) {
            return results;
        }

        Arrays.sort(nums);
        int target = 0;

        for(int i=0; i<nums.length-2; i++) {
            // 此时nums[i]和前一个triplet相同，nums[head]和nums[tail]都会出现相同的组合，
            // 不管是不是能得到target都不需要记录，均为重复计算
            if(i > 0 && nums[i] == nums[i-1]) {
                continue;
            }

            int head = i+1;
            int tail  = nums.length-1;

            while(head<tail) {
                // 见上同理，避免重复计算
                if(head > i+1 && nums[head] == nums[head-1]) {
                    head++;
                    continue;
                }

                // 见上同理，避免重复计算
                if(tail < nums.length-1 && nums[tail] == nums[tail+1]) {
                    tail--;
                    continue;
                }
                
                int sum = nums[i] + nums[head] + nums[tail];
                
                if(sum == target) {
                    results.add(Arrays.asList(nums[i], nums[head], nums[tail]));
                    head++;
                    tail--;
                } else if(sum < target) {
                    head++;
                } else {
                    tail--;
                }
            }
        }

        return results;
    }
}

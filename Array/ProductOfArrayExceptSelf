Product of Array Except Self

描述

Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Solve it without division and in O(n).

For example, given [1,2,3,4], return [24,12,8,6].

Follow up:
Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)

分析

本题求除本身之外其他数的乘积。这样的问题可以分解来做，从左到右遍历数组求出所有当前数左边数的乘积，
再从右到左遍历数组求出当前数右边数的乘积。左边数乘积*右边数乘积即是所求。

时间复杂度O(n)，空间复杂度O(1)

代码

public class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] left = new int[nums.length];
        left[0] = 1;

        for (int i = 1; i < nums.length; ++i) {
            left[i] = nums[i - 1] * left[i - 1];
        }

        int right = 1;
        for (int i = nums.length - 1; i >= 0; --i) {
            left[i] *= right;
            right *= nums[i];
        }

        return left;
    }
}
Implement Stack using Queues

描述

Implement the following operations of a stack using queues.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.
Notes:
You must use only standard operations of a queue -- which means only push to back,
peek/pop from front, size, and is empty operations are valid.
Depending on your language, queue may not be supported natively.
You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
You may assume that all operations are valid 
(for example, no pop or top operations will be called on an empty stack).

分析

可以用两个队列，q和tmp，q存放元素，tmp用来作中转。
push(x)，先将x push 到tmp，然后把q中的元素全部弹出来，存入tmp，最后切换q和tmp
pop()，直接将q的队首元素弹出来即可
该算法push的时间复杂度是O(n), pop的时间复杂度O(1)。
另个一个方法是，让pop是O(n), push是O(1)，思路很类似，就不赘述了。

代码

class MyStack {
    
    Queue<Integer> queue = new LinkedList<>();
    Queue<Integer> tempQueue = new LinkedList<>();
    
    // Push element x into stack.
    public void push(int x) {
        tempQueue.offer(x);

        while(!queue.isEmpty()) {
            tempQueue.offer(queue.poll());
        }
        
        // 交换两个queue的引用即可，不需要再把tempQueue的数据倒回到queue里
        Queue<Integer> temp = tempQueue;
        tempQueue = queue;
        queue = temp;
    }

    // Removes the element on top of the stack.
    public int pop() {
        return queue.poll();
    }

    // Get the top element.
    public int top() {
        return queue.peek();
    }

    // Return whether the stack is empty.
    public boolean empty() {
        return queue.isEmpty();
    }
}

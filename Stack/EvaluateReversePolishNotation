Evaluate Reverse Polish Notation

描述

Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Some examples:
["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6

分析

数字入栈，遇到操作符把最顶的两个数字弹栈，先出来的是第二个操作数，后出来的是第一个操作数。

时间复杂度O(n)，空间复杂度O(n)

代码

public class Solution {
    public int evalRPN(String[] tokens) {
        Stack<String> s = new Stack<>();
        
        for(String e : tokens) {
            if(!isOperator(e)) {
                s.push(e);
            } else {
                String y = s.pop();
                String x = s.pop();
                String r = calculate(x, y, e);
                s.push(r);
            }
        }
        
        return Integer.parseInt(s.pop());
    }
    
    private boolean isOperator(String o) {
        return OPERATORS.indexOf(o) != -1;
    }
    
    private String calculate(String x, String y, String op) {
        int a = Integer.parseInt(x);
        int b = Integer.parseInt(y);
        
        if("+".equals(op)) {
            return Integer.toString(a+b);
        } else if("-".equals(op)) {
            return Integer.toString(a-b);
        } else if("*".equals(op)) {
            return Integer.toString(a*b);
        } else {
            return Integer.toString(a/b);
        }
    }
    
    private static final String OPERATORS = "+-*/";
}
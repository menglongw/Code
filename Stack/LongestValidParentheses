Longest Valid Parentheses

描述

Given a string containing just the characters '(' and ')', 
find the length of the longest valid (well-formed) parentheses substring.

For "(()", the longest valid parentheses substring is "()", which has length = 2.

Another example is ")()())", where the longest valid parentheses substring is "()()", 
which has length = 4.

分析

"()(()"的结果是2不是4。

解法1：用栈

输入为"((((..."时超时。

时间复杂度O(n)，空间复杂度O(n)

解法2：动态规划

输入为"((((..."时超时。

动态规划法将大问题化为小问题，我们不一定要一下子计算出整个字符串中最长括号对，我们可以先从后向前，一点一点计算。
假设d[i]是从下标i开始到字符串结尾最长括号对长度，s[i]是字符串下标为i的括号。

1. 如果s[i-1]是左括号，如果i + d[i] + 1是右括号的话，那d[i-1] = d[i] + 2。如果不是则为0。这是嵌套括号的情况。
然后检查如果i + d[i] + 1右边还有其他非嵌套的括号，也要把长度加进来，d[i-1] = d[i-1] + dp[i + d[i] + 1]。
所以要同时处理嵌套括号"(())"和不嵌套括号"()()"两种情况，比如"()(())"。

2. 如果s[i-1]是右括号，因为不可能有右括号开头的括号对，所以d[i-1] = 0。

时间复杂度O(n)，空间复杂度O(n)

代码

方法1：用栈

public class Solution {

    public int longestValidParentheses(String s) {

        int maxLen = 0;
        // the position of the last ')'
        int last = -1;
        Stack<Integer> lefts = new Stack<>();

        for(int i=0; i<s.length(); i++) {
            if(s.charAt(i) =='(') {
                lefts.push(i);
            } else {
                if(lefts.isEmpty()) {
                    // no matching left
                    last = i;
                } else {
                    // find a matching pair
                    lefts.pop();
                    if(lefts.isEmpty()) {
                        maxLen = Math.max(maxLen, i-last);
                    } else {
                        maxLen = Math.max(maxLen, i-lefts.peek());
                    }
                }
            }
        }

        return maxLen;
    }
}

方法2：动态规划

public class Solution {

    public int longestValidParentheses(String s) {

        int[] dp = new int[s.length()];
        int maxLen = 0;

        for(int i = s.length()-2; i >=0; i--){
            if(s.charAt(i)=='('){
                int end = i + dp[i+1] + 1;
                if(end < s.length() && s.charAt(end)==')'){
                    // 处理嵌套括号"(())"
                    dp[i] = dp[i+1] + 2;
                    if(end + 1 < s.length()){
                        // 处理不嵌套括号"()()"
                        dp[i] += dp[end + 1];
                    }
                }
            }
    
            maxLen = Math.max(maxLen, dp[i]);
        }

        return maxLen;
    }
}

Implement Queue using Stacks

描述

Implement the following operations of a queue using stacks.

push(x) -- Push element x to the back of queue.
pop() -- Removes the element from in front of queue.
peek() -- Get the front element.
empty() -- Return whether the queue is empty.
Notes:
You must use only standard operations of a stack 
-- which means only push to top, peek/pop from top, size, and is empty operations are valid.
Depending on your language, stack may not be supported natively. 
You may simulate a stack by using a list or deque (double-ended queue), 
as long as you use only standard operations of a stack.
You may assume that all operations are valid 
(for example, no pop or peek operations will be called on an empty queue).

分析

可以用两个栈，s和tmp，s存放元素，tmp用来作中转。
push(x)，先将s中的元素全部弹出来，存入tmp，把x push 到tmp，然后把tmp中的元素全部弹出来，存入s
pop()，直接将s的栈顶元素弹出来即可
该算法push的算法时间复杂度是O(n), pop的算法时间复杂度O(1)。
另个一个方法是，让pop是O(n), push是O(1)，思路很类似，就不赘述了。

代码

class MyQueue {
    Stack<Integer> stack = new Stack<>();
    Stack<Integer> tempStack = new Stack<>();
    
    // Push element x to the back of queue.
    public void push(int x) {
        while(!stack.empty()) {
            tempStack.push(stack.pop());
        }
        
        stack.push(x);
        
        while(!tempStack.empty()) {
            stack.push(tempStack.pop());
        }
    }

    // Removes the element from in front of queue.
    public int pop() {
        return stack.pop();
    }

    // Get the front element.
    public int peek() {
        return stack.peek();
    }

    // Return whether the queue is empty.
    public boolean empty() {
        return stack.empty();
    }
}

